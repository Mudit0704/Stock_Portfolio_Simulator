//TODO Your review should have the following sections: Design critique, implementation critique,
//TODO documentation critique, design/code strengths, design/code limitations and suggestions on how to
//TODO address them. If your review is not structured into sections you will lose points.
//TODO we need to merge our reviews to achieve above sections

Model review:

Strengths:
The model has been implemented in a logically sound manner and made changes for re-balancing much more simpler.
The addition of all the buy sell operations into the portfolio is a good decision in terms of logically being
able to add many more operations apart from just re-balancing a portfolio.

However, there are some things that could have been done better in terms of design.

Limitations of the design:
The principles of Single Responsibility and Open Close principle have been violated at multiple places.

As the application has been developed in a Model-View-Controller, attempts have been made to ensure
nothing apart from the "model" has been exposed to the controller.
However, this has resulted in addition of more and more methods to the Model interface which has resulted in the
interface growing in size. Ideally the interface should not have changed once written, and the changes should
be open for extension and closed for modification.

The portfolio type has been implemented in a similar fashion.
For all the functions to be provided by the model, a portfolio object has to be created everytime,
coupling it with portfolio. The portfolio type has to be specified to return results appropriate for
the portfolio type. This in by itself is because of the tight coupling.

Code could have been a bit cleaner from the perspective of some functions like getPortfolioCostBasis
in PortfolioImpl class. This function is very long and is having more than 4 blocks of indentations.
Ideally that should be restricted to 3 to 4 blocks and this impacts the readability and debuggability of
the code.

Code documentation is appropriate and easy to understand.
No changes were to be requested from us to the providers.

View review:

Strengths:

The callback functionality implementation between the controller and view was well executed,
and it helped in easy incorporation of the rebalancing logic along with proper flow of communication
between M-V-C.

Limitations:

The StockView interface is overloaded with methods and similarly its concrete class StockViewImpl.
Better modularity here could have helped improve debuggability and readability. With each iteration,
all new methods have been added to same old interface and this has led to a very large interface
that is doing a lot. Interface creation and extension in each iteration would have made the
implementation much cleaner.

Presence of interface methods and implementation that are not even being used. Interface should
have methods as and when they are going to be used as compared to having them for the future (if
that was the intention).

Method naming convention can be improved, for example errorMsg2 instead it should be named
using what kind of error its displaying for example displayInvalidOptionSelectedError which makes
it more informative.

Code documentation is missing for some parts. The documentation is easy to understand wherever
provided.
No changes were to be requested from us to the providers.

Controller review:

Strengths:

Major strength was code modularity that helped in ease of implementation of rebalancing logic and
code reuse. For example, a separate class for validating user input throughout the controller
lifecycle was really helpful and made the validation of user input easy while implementing the
rebalancing functionality. Also, by storing the common functionality between inflexible and flexible
portfolios inside AbstractPF class was a great approach to have code reuse.

Limitations:

Some methods like createInvtPortfolio and createDcaPortfolio have large number of lines of code
along with some redundant code. For better investigation, debugging and code readability this code
could have been broken down into smaller methods, especially the logic that is common between them.

APICaller class could have been inside the model as typically the model is supposed to handle the
application functionality logic and the controller is just supposed to handle the I/O.

The method naming convention could be better for to have code readability and understandability.
For eg, echoPfNameWithDate is mainly being used to display results for operations asking
portfolioname and date, so this could have been given a generic name like
displayOperationsWithPfNameAndDateResults.

Code documentation is appropriate and easy to understand.
No changes were to be requested from us to the providers.